generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  name            String
  email           String          @unique
  password        String
  role            Role            @default(USER)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  blogPosts       BlogPost[]
  assignedTickets Ticket[]        @relation("AssignedTickets")
  tickets         Ticket[]        @relation("UserTickets")
  comments        TicketComment[]
}

model Client {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  phone        String?
  company      String?
  address      String?
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  quotes       Quote[]       @relation("ClientQuotes")
  tickets      Ticket[]      @relation("ClientTickets")
  testimonials Testimonial[]
}

model Ticket {
  id           String          @id @default(cuid())
  title        String
  description  String
  priority     Priority        @default(MEDIUM)
  status       TicketStatus    @default(OPEN)
  category     String?
  userId       String
  clientId     String?
  assignedToId String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  assignedTo   User?           @relation("AssignedTickets", fields: [assignedToId], references: [id])
  client       Client?         @relation("ClientTickets", fields: [clientId], references: [id])
  user         User            @relation("UserTickets", fields: [userId], references: [id], onDelete: Cascade)
  comments     TicketComment[]
  testimonials Testimonial[]
}

model TicketComment {
  id        String   @id @default(cuid())
  content   String
  ticketId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  email     String
  rating    Int      // 1-5 stars
  comment   String
  service   String?  // tipo de servicio
  ticketId  String?  // referencia al ticket original
  clientId  String?  // referencia al cliente
  approved  Boolean  @default(false) // para moderar antes de mostrar
  featured  Boolean  @default(false) // destacar en homepage
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    Ticket?  @relation(fields: [ticketId], references: [id])
  client    Client?  @relation(fields: [clientId], references: [id])
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  duration    String
  features    String
  active      Boolean  @default(true)
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quote {
  id          String      @id @default(cuid())
  name        String
  email       String
  company     String?
  phone       String?
  serviceType String
  description String
  budget      String?
  status      QuoteStatus @default(PENDING)
  clientId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  client      Client?     @relation("ClientQuotes", fields: [clientId], references: [id])
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  excerpt   String?
  slug      String   @unique
  published Boolean  @default(false)
  authorId  String
  category  String?
  tags      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  AGENT
  ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum QuoteStatus {
  PENDING
  REVIEWED
  APPROVED
  REJECTED
}
