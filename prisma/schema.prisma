// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String
  role     Role   @default(USER)
  
  tickets       Ticket[] @relation("UserTickets")
  assignedTickets Ticket[] @relation("AssignedTickets")
  comments      TicketComment[]
  blogPosts     BlogPost[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String
  priority    Priority     @default(MEDIUM)
  status      TicketStatus @default(OPEN)
  category    String?
  
  userId   String
  user     User   @relation("UserTickets", fields: [userId], references: [id])
  
  assignedToId String?
  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id])
  
  comments TicketComment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketComment {
  id      String @id @default(cuid())
  content String
  
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  duration    String
  features    String   // JSON string con las caracter√≠sticas del servicio
  active      Boolean  @default(true)
  category    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quote {
  id          String @id @default(cuid())
  name        String
  email       String
  company     String?
  phone       String?
  serviceType String
  description String
  budget      String?
  status      QuoteStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id          String @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  slug        String @unique
  published   Boolean @default(false)
  authorId    String
  author      User    @relation(fields: [authorId], references: [id])
  category    String?
  tags        String?  // JSON string con los tags
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  AGENT
  ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum QuoteStatus {
  PENDING
  REVIEWED
  APPROVED
  REJECTED
}
